<?php
// YML Export module
// created by: Anton Sidashin ( http://russianwebstudio.com ) for audioproshop.ru

function yml_export_menu() {
  $items = array();
  $items['yml_products.xml'] = array(
    'title' => t('YML export'),
    'page callback' => 'yml_export_get_xml',    
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'), 
  );
  $items['admin/settings/yml_export'] = array(
    'title' => 'Yml export for Yandex.market',   
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yml_export_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function yml_export_admin_settings() {
  $form = array();
  
  $vocabs = array('' => t('<None>'));
  $r = db_query("SELECT vid, name FROM {vocabulary}");
  while ($row = db_fetch_array($r)) {
    $vocabs[$row['vid']] = $row['name'];
  }
  
  if (count($vocabs) == 1) {
    drupal_set_message(t("No vocabularies! Export can't work properly. Please create at least one taxonomy vocabulary and use it for your products."));
  }
    
  $form['yml_export_vid'] = array(
    '#type' => 'select',
    '#options' => $vocabs,
    '#title' => t('Select vocabulary for Yandex.Market export'),    
    '#default_value' => variable_get('yml_export_vid', ''),
    '#description' => t('Yandex.Market supports only 1 vocabulary, please select what vocabulary should be considered as primary for export.'),
  );
  
  $form['yml_export_types'] = array(
    '#type' => 'checkboxes',
    '#options' => _uc_product_node_types(),
    '#default_value' => variable_get('yml_export_types', array('product' => 'product')),
    '#title' => t('Select node types for export'),
  );
  
  $form['yml_export_delivery'] = array(
    '#type' => 'select',
    '#options' => array('true' => t("true"), 'false' => t("false")),
    '#title' => t('Select if delivery is enabled'),    
    '#default_value' => variable_get('yml_export_delivery', 'true'),
    '#description' => t('Yandex.Market has "delivery" field. Select if it is enabled'),
  );
  
  $form['yml_export_currency'] = array(
    '#type' => 'item',   
    '#title' => t('Ubercart Currency'),    
    '#value' => variable_get('uc_currency_code', 'USD') . ' (' . l(t("Change"), 'admin/store/settings/store/edit/format') . ')',
    '#description' => t("Should be 'RUR' for Russia"),
  );
  
  $url = url('yml_products.xml', array('absolute' => TRUE));
  $form['generated_url'] = array(
    '#type' => 'item',  
    '#title' => t("Generated file"),
    '#value' => $url . ' (' . l(t("View"), $url) . ')',
    '#description' => t("Use this url in Yandex.Market"),
  );
  
  
  
  return system_settings_form($form); 
}

function yml_export_get_xml() {
  if (variable_get('yml_export_vid', '') == '') {
    die('Please select primary vocabulary on YML export settings page!');
  }
  
  $ctypes = variable_get('yml_export_types', array('product' => 'product'));
  $enabled_ctypes = array();
  foreach ($ctypes as $type_name => $enabled) {
    if ($enabled) {
      $enabled_ctypes[$type_name] = $type_name;
    }
  }
  
  if (empty($enabled_ctypes)) {
    die('Please select at least one node type on YML export settings page!');
  }  
  
  $node_types = variable_get('yml_export_types', array('product' => 'product'));
  $r = db_query("SELECT nid FROM {node} WHERE type IN ('" . implode("','", $node_types) . "') AND status=%d", 1);
 
  $context = array(
    'revision' => 'altered',
    'type' => 'product',
    'class' => array('product'),
  ); 
  
  $nodes = array();
  while ($nid = db_fetch_object($r)) {
    $product = node_load($nid -> nid);
    
    if (function_exists('uc_price')) {
      $context['subject']['node'] = $product;
      $context['subject']['field'] = 'list_price';
      $product -> list_price = uc_price($product -> list_price, $context);
      
      $context['subject']['field'] = 'sell_price';
      $product -> sell_price = uc_price($product -> sell_price, $context);
    }
  
    $nodes[] = $product; 
  }
  
  $r = db_query("SELECT d.tid, d.name, h.* FROM {term_data} d LEFT JOIN {term_hierarchy} h USING(tid) WHERE d.vid=%d", variable_get('yml_export_vid', ''));
  $categories = array();
  while ($term = db_fetch_object($r)) {
    $categories[] = $term;
  }
  
    echo yml_convert_to_1251(theme('yml_products', $nodes, $categories), 'utf-8');
}

function yml_export_theme() {
  return array(    
    'yml_products' => array(
      'arguments' => array('nodes' => NULL, 'categories' => NULL),
      'template' => 'yml_products',
    ));
}

// get all node types that are registered by ubercart 
function _uc_product_node_types() {
  $node_types = node_get_types('types');
  $product_types = array();
  foreach ($node_types as $n) {
    if ($n -> module == 'uc_product') {
      $product_types[$n -> type] = $n -> type;
    }
 }

 return $product_types;
}

// prepare all strings so they are valid for Yandex.Market format
function yml_safe($str) {
  $rep = array(
    '"' => '&quot;',
    '&' => '&amp;',
    '>' => '&gt;',
    '<' => '&lt;',
    "'" => '&apos;'
  );
  
  return strtr($str, $rep);
}

function yml_convert_to_1251($data, $encoding) {
  if (function_exists('iconv')) {
    $out = @iconv($encoding, 'windows-1251//TRANSLIT', $data);
  }
  elseif (function_exists('mb_convert_encoding')) {
    $out = @mb_convert_encoding($data, 'windows-1251', $encoding);
  }
  elseif (function_exists('recode_string')) {
    $out = @recode_string($encoding .'..windows-1251', $data);
  }
  else {
    watchdog('php', 'Unsupported encoding %s. Please install iconv, GNU recode or mbstring for PHP.', array('%s' => $encoding), WATCHDOG_ERROR);
    return FALSE;
  }

  return $out;
}

// shortcut for usage in html templates
function ys($str) {
  return yml_safe($str);
}
