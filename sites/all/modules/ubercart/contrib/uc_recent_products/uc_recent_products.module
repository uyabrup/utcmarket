<?php
// $Id$
/**
 * @file
 * Module for displaying recently viewed products.
 */

/**
 * Implementation of hook_menu().
 */
function uc_recent_products_menu() {
  $items = array();

  $items['admin/settings/recentproducts'] = array(
    'title' => 'Recently Viewed Products',
    'description' => 'Administer settings for your recently viewed products block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_recent_products_form'),
    'access arguments' => array('administer store'),
  );

  return $items;
}

/**
 * Implementation of hook_form().
 */
function uc_recent_products_form() {
  $form['uc_recent_products_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of products'),
    '#default_value' => variable_get('uc_recent_products_limit', 4),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('Enter the maximum number of products to display in the block.')
  );
  $form['uc_recent_products_expire'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of days'),
    '#default_value' => variable_get('uc_recent_products_expire', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('Enter the number of days to store product views.<br />**Database entries are cleared through Cron**')
  );
  
  $presets = imagecache_presets();
      foreach ($presets as $preset_id => $preset) {
      $presetlist[$preset_id] = t('Display via imagecache preset !preset', array('!preset' => $preset['presetname']));
	}
  
  $form['uc_recent_products_preset'] = array(
      '#type' => 'select',
      '#title' => t('Imagecache preset'),
      '#default_value' => variable_get('uc_recent_products_preset', 4),
      '#options' => $presetlist,
	  '#description' => t('Choose a preset name to display product images'),
    );
		
  $form['uc_recent_products_fields'] = array(
    '#title' => t('Fields'),
    '#type' => 'checkboxes',
    '#options' => array('image'=>t('Image'), 'title'=>t('Title'), 'price'=>t('Price'),),
    '#default_value' => variable_get('uc_recent_products_fields', array('image', 'title', 'price')),
	'#description' => t('Fields you want to show to users'),
    );

  return system_settings_form($form);
}

/**
 * Implementation of hook_exit().
 */
function uc_recent_products_exit() {
  global $user;
  //$id = db_last_insert_id('uc_recent_products', 'rid');
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    
    if (uc_product_is_product($node)) {
      // Delete duplicates
      db_query("DELETE FROM {uc_recent_products} WHERE nid = %d AND sid = '%s'", arg(1), uc_recent_products_get_id());
  
      // Insert newly selected node view
      db_query("INSERT INTO {uc_recent_products} (rid, nid, sid, visit_time) values(%d, %d, '%s', %d)", $id, arg(1), uc_recent_products_get_id(), time());
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function uc_recent_products_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch($op) {
    case 'delete':
      if (uc_product_is_product($node)) {
        db_query('DELETE FROM {uc_recent_products} WHERE nid = %d', $node->nid);
      }
      break;
      
    case 'update':
      // if the node is unpublished, we want to remove it formt he recent
      // products list
      if ($node->status == '0' && uc_product_is_product($node)) {
        db_query('DELETE FROM {uc_recent_products} WHERE nid = %d', $node->nid);
      }
      break;
  }
}

/**
 * Implementation of hook_user().
 */
function uc_recent_products_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    case 'delete':
      db_query('DELETE FROM {uc_recent_products} WHERE sid = %d', $user->uid);
      break;
      
    case 'login':
      db_query("UPDATE {uc_recent_products} SET sid = %d WHERE sid = '%s'", $user->uid, session_id());
      break;
  }
}

/**
 * Implementation of hook_block().
 */
function uc_recent_products_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  $limit = variable_get('uc_recent_products_limit', 4);
  
  if ($op == 'list') {
    $blocks[0]['info'] = t('Recently Viewed Products');
    $blocks[0]['cache'] = BLOCK_NO_CACHE;
    
    return $blocks;
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0:
        $query = db_query_range("SELECT nid FROM {uc_recent_products} WHERE sid = '%s' ORDER BY visit_time DESC", uc_recent_products_get_id(), $from = 0, $count = $limit);
    
        $items = array();
        while ($link = db_fetch_object($query)) {
          $items[] =  $link->nid;
        }
    
        if (count($items) == 0) {
          return;
        }
    
        $blocks['subject'] = t('Recently Viewed Products');
        $blocks['content'] = theme('uc_recent_products', $items);
        break;
    }
    return $blocks;
  }
}

/**
 * Implementation of hook_theme().
 */
function uc_recent_products_theme() {
  return array(
    'uc_recent_products' => array(
      'arguments' => array(
        'products' => NULL,
      ),
    ),
  );
}


function theme_uc_recent_products($products) {
  
   $preset = imagecache_preset(variable_get('uc_recent_products_preset', 4));
   $presetname = $preset['presetname'];
   $options = variable_get('uc_recent_products_fields', array('image', 'title', 'price'));
  
  $items = array();
  foreach ($products as $nid) {
    $product = node_load($nid, NULL, TRUE);
    $titlelink = ($options['title']) ? l($product->title, "node/$nid") : '';
    if (module_exists('imagecache') && isset($product->field_image_cache) && file_exists($product->field_image_cache[0]['filepath']) && $options['image']) {
      $imagelink = l(theme('imagecache', $presetname, $product->field_image_cache[0]['filepath'], $product->title, $product->title), "node/$nid", array('html' => TRUE));
    }
    else {
      $imagelink = '';
    }
    if ($imagelink || $titlelink) {
          
		  $output = '<div class="recent-products">';
		  $output .= ($options['image']) ? '<div class="recent-product-image">'. $imagelink .'</div>' : '';
		  $output .= ($options['title']) ? '<div class="recent-product-title">'. $titlelink .'</div>' : '';
		  $output .= ($options['price']) ? '<div class="recent-product-price">'. uc_currency_format($product->sell_price) .'</div>' : '';
		  $output .= '</div>';			  		  
		  
		  $items[] =  $output;                     
     }
	
	$count++;
		
  }
  
    if (!empty($items)) {
        return theme_item_list($items, NULL, 'ul', array('class' => 'recent-products'));
  } 
  else {
    return '';
  }
}

function uc_recent_products_get_id() {
  global $user;
  if ($user->uid) {
    return $user->uid;
  }
  elseif ($sid = session_id()) {
    return $sid;
  }
}

/**
 * Implementation of hook_cron().
 */
function uc_recent_products_cron() {
  $expirelimit = variable_get('uc_recent_products_expire', 3) * 86400;
  
  // clean expired product views
  db_query('DELETE FROM {uc_recent_products} WHERE visit_time < %d', time() - $expirelimit);
}
